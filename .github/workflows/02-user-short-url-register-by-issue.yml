name: User short URL register by issue
  
on:
  issues:
    types: [opened, edited]
    
jobs:
  user-short-url-register:
    if: contains(github.event.issue.labels.*.name, 'user-short-url-register')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
    
    - name: Extract user ID, original URL, and short URL from issue body
      env:
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: extract
      run: |
        BODY="${{ github.event.issue.body }}"
        USER_ID=$(echo "$BODY" | awk '/### 사용자 아이디/{getline; getline; print}' | xargs | sed 's/^[ \t]*//;s/[ \t]*$//')
        ORIGINAL_URL=$(echo "$BODY" | awk '/### 원본 URL/{getline; getline; print}' | xargs | sed 's/^[ \t]*//;s/[ \t]*$//')
        SHORT_PATH=$(echo "$BODY" | awk '/### 단축 URL 경로/{getline; getline; print}' | xargs | sed 's/^[ \t]*//;s/[ \t]*$//')
        
        echo "Extracted USER_ID: $USER_ID"
        echo "Extracted ORIGINAL_URL: $ORIGINAL_URL"
        echo "Extracted SHORT_PATH: $SHORT_PATH"
        
        if [[ ! "$USER_ID" =~ ^[a-z0-9][a-z0-9_-]{1,28}[a-z0-9]$ ]]; then
          echo "올바르지 않은 아이디 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "user_id=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if [[ ! "$ORIGINAL_URL" =~ ^https?:// ]]; then
          echo "올바르지 않은 원본 URL 형식" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          echo "original_url=" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        validate_segment() {
          SEGMENT="$1"
          echo "SEGMENT: $SEGMENT"
          
          if [[ "$SEGMENT" =~ ^[a-zA-Z0-9](?:[a-zA-Z0-9_-]{0,18}[a-zA-Z0-9])?$ ]]; then
            return 1
          fi
          return 0
        }
        
        IFS='/' read -ra PARTS <<< "$SHORT_PATH"
        for SEGMENT in "${PARTS[@]}"; do
          if ! validate_segment "$SEGMENT"; then
            echo "올바르지 않은 단축 URL 경로 형식: $SEGMENT" > comment.md
            gh issue comment "$ISSUE_NUMBER" -F comment.md
            echo "short_path=" >> $GITHUB_OUTPUT
            exit 1
          fi
        done
        
        echo "user_id=$USER_ID" >> $GITHUB_OUTPUT
        echo "original_url=$ORIGINAL_URL" >> $GITHUB_OUTPUT
        echo "short_path=$SHORT_PATH" >> $GITHUB_OUTPUT
        
    - name: Check if user exists
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ ! -d "public/u/$USER_ID" ]; then
          echo "존재하지 않는 사용자 아이디: **$USER_ID**" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Check GitHub user ownership
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        GITHUB_ID: ${{ github.event.issue.user.login }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        META_FILE="public/u/$USER_ID/meta.json"
        
        GITHUB_ID_META_FILE=$(jq -r '.github_id // empty' "$META_FILE")
        if [ "$GITHUB_ID" != "$GITHUB_ID_META_FILE" ]; then
          echo "권한이 없습니다" > comment.md
          gh issue comment "$ISSUE_NUMBER" -F comment.md
          exit 1
        fi
        
    - name: Create user short URL page
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        ORIGINAL_URL: ${{ steps.extract.outputs.original_url }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
      id: create
      run: |
        FILE_PATH="public/u/$USER_ID/${SHORT_PATH}.html"
        mkdir -p "$(dirname "$FILE_PATH")"
        
        sed -e "s|\${USER_ID}|$USER_ID|g" \
        -e "s|\${ORIGINAL_URL}|$ORIGINAL_URL|g" \
        -e "s|\${SHORT_PATH}|$SHORT_PATH|g" \
        templates/user-short-url.html > "$FILE_PATH"
        
        echo "file_path=$FILE_PATH" >> $GITHUB_OUTPUT
        
    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
          
    - name: Commit and push to main
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        FILE_PATH: ${{ steps.create.outputs.file_path }}
      run: |
        git checkout main
        git add "$FILE_PATH" || true
        git commit -m "Add user short URL page for $USER_ID" || echo "Nothing to commit"
        git push origin main
        
    - name: Commit and push to gh-pages
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        FILE_PATH: ${{ steps.create.outputs.file_path }}
      run: |
        TMP_FILE_PATH="/tmp/$USER_ID/${SHORT_PATH}.html"
        mkdir -p "$(dirname "$TMP_FILE_PATH")"
        cp -r "$FILE_PATH" "$TMP_FILE_PATH"
        
        git fetch origin gh-pages
        git switch gh-pages || git checkout -b gh-pages
        
        GH_PAGES_FILE_PATH="u/$USER_ID/${SHORT_PATH}.html"
        mkdir -p "$(dirname "$GH_PAGES_FILE_PATH")"
        cp -r "$TMP_FILE_PATH" "$GH_PAGES_FILE_PATH"
        
        git add "$GH_PAGES_FILE_PATH" || true
        git commit -m "Add user short URL page: $USER_ID/$SHORT_PATH" || echo "Nothing to commit"
        git push origin gh-pages
        
    - name: Comment on issue
      env:
        USER_ID: ${{ steps.extract.outputs.user_id }}
        SHORT_PATH: ${{ steps.extract.outputs.short_path }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "사용자 **$USER_ID**의 단축 URL **$SHORT_PATH** 등록 완료" > comment.md
        gh issue comment ${{ github.event.issue.number }} -F comment.md
